project(veeam_test)
cmake_minimum_required(VERSION 2.8)
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wall")
add_definitions(-DDEBUG_MODE)
aux_source_directory(. SRC_LIST)
add_executable(${PROJECT_NAME} ${SRC_LIST})
set(Boost_USE_MULTITHREADED ON)
include(CheckCXXCompilerFlag)

check_cxx_compiler_flag("-std=c++11" COMPILER_SUPPORTS_CXX11)
check_cxx_compiler_flag("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
elseif(COMPILER_SUPPORTS_CXX0X)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
else()
        message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()

find_package(Boost COMPONENTS system thread exception filesystem program_options REQUIRED)
if(Boost_FOUND)
    message(STATUS "Boost_VERSION=" ${Boost_VERSION})
    message(STATUS "Boost_LIBRARIES=" ${Boost_LIBRARIES})
    message(STATUS "Boost_LIBRARY_DIRS=" ${Boost_LIBRARY_DIRS})
    message(STATUS "Boost_INCLUDE_DIRS=" ${Boost_INCLUDE_DIRS})
    include_directories(${Boost_INCLUDE_DIRS})
    link_directories(${Boost_LIBRARY_DIRS})
    target_link_libraries(veeam_test ${Boost_LIBRARIES})
endif()
